feat(mcp): add First Crack Detection MCP server, session manager, configs, tests, and docs

Summary:
- Introduces a complete Phase 2 implementation for exposing the First Crack detection pipeline as an MCP (Model Context Protocol) server (stdio transport).
- Adds thread-safe session management, audio device validation, configuration management, utilities, and Pydantic data models.
- Implements comprehensive TDD-focused unit and integration tests, plus manual/integration test clients and scripts.
- Ships extensive documentation (design, plans, testing guide, Warp integration, milestone summaries) and example configuration files.
- Updates project requirements and pytest configuration.

What’s included (major highlights):
- New MCP server and runtime
  - src/mcp_servers/first_crack_detection/server.py — MCP server entry, tool/resource registration (start/get/stop + health)
  - src/mcp_servers/first_crack_detection/__main__.py — module entrypoint
  - src/mcp_servers/__init__.py, package scaffolding

- Core server components
  - src/mcp_servers/first_crack_detection/session_manager.py — DetectionSessionManager (thread-safe, idempotent start/stop/status)
  - src/mcp_servers/first_crack_detection/models.py — Pydantic models + dataclass session + custom exceptions
  - src/mcp_servers/first_crack_detection/config.py — load_config with env overrides and flattening
  - src/mcp_servers/first_crack_detection/utils.py — timezone, formatting, logging helpers
  - src/mcp_servers/first_crack_detection/audio_devices.py — audio device discovery & validation using sounddevice

- Tests (unit, integration, manual)
  - tests/mcp_servers/first_crack_detection/unit/* — model, utils, audio_devices, config, exceptions, session_manager unit tests (TDD style)
  - tests/mcp_servers/first_crack_detection/integration/test_file_detection.py — async integration tests using MCP stdio client
  - tests/mcp_servers/first_crack_detection/manual_test_client.py, manual_test_with_audio.py, quick_test.py, test_first_crack_detection.py — helper/manual test scripts for local verification

- Docs & plans
  - docs/design/phase-2-objective-1-design.md — design doc
  - docs/mcp_servers/* — MILESTONE_2_SUMMARY.md, PHASE2_OBJ1_COMPLETE.md, TESTING.md, WARP_INTEGRATION.md
  - docs/mcp_servers/first_crack_detection/README.md, DEPLOYMENT.md (placeholder)
  - docs/plans/phase-2-objective-1-plan.md and requirements files under docs/requirements

- Configuration examples & env
  - config/first_crack_detection/config.example.json
  - config/first_crack_detection/config.json
  - config/first_crack_detection/.env.example

- Project infra updates
  - pytest.ini — test discovery and markers
  - requirements.txt — added MCP, pydantic, python-dateutil, structlog, pytest-asyncio, pytest-cov
  - tests/ package init files added

- Data/document additions
  - data/labels/project-1-*.json — reformatted/expanded Label Studio export (large)
  - docs/KN-8828B-2K+Manual_0_1g.pdf — added Hottop roaster manual binary (reference for future Roaster MCP)

Testing & verification:
- Extensive unit tests added to validate models, exceptions, config, utils, audio device logic, and session manager behavior (idempotency, thread-safety, validation).
- Integration tests for MCP stdio-based interactions (list tools, health, start/status/stop workflow).
- Manual/integration scripts for local end-to-end verification with real audio files and microphone devices.

Notes:
- The MCP server uses stdio transport for Phase 2 (development). Phase 3 documents outline migration to HTTP + SSE + Cloudflare tunnel + Auth0.
- FirstCrackDetector (inference) is integrated by reference (src/inference/first_crack_detector.py) and is expected to present the start()/stop()/is_first_crack() API. Tests mock the detector where applicable.
- Config loading priority: environment variables > config file > defaults.
- Behavior: single active session per server, idempotent operations, fast-fail validations (model/file/microphone).

No breaking changes to Phase 1 inference code are made here; this commit wraps and integrates the inference pipeline behind an MCP server and delivers the surrounding ecosystem (config, tests, docs) to support agent-based orchestration.

Co-authored-by: automated TDD scaffolding & documentation generation
