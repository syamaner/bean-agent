{
  "name": "Autonomous Coffee Roast Loop",
  "nodes": [
    {
      "parameters": {},
      "id": "trigger-start",
      "name": "Start Roast",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://genai-7175210165555426.uk.auth0.com/oauth/token",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "client_id",
              "value": "Jk3aF2NfkiiOIXY0eHJQxfA6jkP0Pjf7"
            },
            {
              "name": "client_secret",
              "value": "05agLnSUZceYK2Yl9bYGGnV_zuy7EAJ9ZWnMuOpCHEIOx2v8xZ7XNAmsQW020m2k"
            },
            {
              "name": "audience",
              "value": "https://coffee-roasting-api"
            },
            {
              "name": "grant_type",
              "value": "client_credentials"
            }
          ]
        },
        "options": {}
      },
      "id": "get-token",
      "name": "Get Auth0 Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 400]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "token-var",
              "name": "auth_token",
              "value": "={{ $json.access_token }}",
              "type": "string"
            },
            {
              "id": "loop-counter",
              "name": "iteration",
              "value": "0",
              "type": "number"
            },
            {
              "id": "roast-phase",
              "name": "phase",
              "value": "starting",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "init-vars",
      "name": "Initialize State",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [680, 400]
    },
    {
      "parameters": {
        "mode": "chooseBranch",
        "output": "={{ $json.iteration < 180 && $json.phase !== 'complete' ? 'continue' : 'done' }}"
      },
      "id": "check-continue",
      "name": "Continue Loop?",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [900, 400]
    },
    {
      "parameters": {
        "amount": 10,
        "unit": "seconds"
      },
      "id": "wait-node",
      "name": "Wait 10s",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [1120, 300],
      "webhookId": "autonomous-roast-wait"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "increment",
              "name": "iteration",
              "value": "={{ $json.iteration + 1 }}",
              "type": "number"
            },
            {
              "id": "elapsed",
              "name": "elapsed_seconds",
              "value": "={{ $json.iteration * 10 }}",
              "type": "number"
            },
            {
              "id": "elapsed-min",
              "name": "elapsed_minutes",
              "value": "={{ Math.floor(($json.iteration * 10) / 60) }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "update-state",
      "name": "Update State",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Roast monitoring iteration {{ $json.iteration }} ({{ $json.elapsed_minutes }}:{{ String(($json.iteration * 10) % 60).padStart(2, '0') }} elapsed).\n\nYour task:\n1. Check roaster status using read_roaster_status tool\n2. Check first crack detection using get_first_crack_status tool\n3. Analyze current phase: {{ $json.phase }}\n4. Make necessary adjustments or declare roast complete\n5. Respond with current status and actions taken\n\nIf roast is complete (beans dropped), set phase to 'complete' and report final summary.",
        "options": {
          "systemMessage": "You are an autonomous coffee roasting system.\n\nYou MUST use the MCP tools to:\n1. Check roaster status (read_roaster_status)\n2. Check first crack status (get_first_crack_status)\n3. Control roaster (set_heat, set_fan, drop_beans, etc.)\n\nRoasting phases:\n1. starting: Begin preheat if not started\n2. preheating: Heat 100%, Fan 0%, monitor until ~180°C\n3. ready: Waiting for user to add beans\n4. drying: Beans added, building heat\n5. maillard: RoR 5-8°C/min\n6. first_crack: Reduce heat when detected\n7. development: 15-20% of total time post-FC\n8. complete: Beans dropped, cooling\n\nKey decisions:\n- Start roaster if not running\n- Preheat to 180°C chamber temp\n- Detect bean charge from temp drop\n- Start first crack detection early\n- Reduce heat (60-70%) after first crack\n- Drop beans at 195-200°C for light roast\n- Start cooling after drop\n\nSafety:\n- Max bean temp: 205°C\n- Max RoR: 10°C/min\n- Always check status before adjusting\n\nProvide concise updates. Take action every iteration."
        }
      },
      "id": "ai-agent",
      "name": "AI Roast Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {
          "maxTokens": 1500,
          "temperature": 0.3
        }
      },
      "id": "openai-model",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [1560, 80],
      "credentials": {
        "openAiApi": {
          "id": "openai-credential",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "endpointUrl": "http://host.docker.internal:5002/sse",
        "authentication": "bearerAuth",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.2,
      "position": [1800, 200],
      "id": "mcp-roaster",
      "name": "Roaster Control MCP",
      "credentials": {
        "httpBearerAuth": {
          "id": "auth0-bearer",
          "name": "Auth0 Bearer Token"
        }
      }
    },
    {
      "parameters": {
        "endpointUrl": "http://host.docker.internal:5001/sse",
        "authentication": "bearerAuth",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.2,
      "position": [1800, 400],
      "id": "mcp-detector",
      "name": "First Crack Detection MCP",
      "credentials": {
        "httpBearerAuth": {
          "id": "auth0-bearer",
          "name": "Auth0 Bearer Token"
        }
      }
    },
    {
      "parameters": {
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [1680, 80],
      "id": "memory-buffer",
      "name": "Agent Memory"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "assignments": {
          "assignments": [
            {
              "id": "preserve-token",
              "name": "auth_token",
              "value": "={{ $('Initialize State').item.json.auth_token }}",
              "type": "string"
            },
            {
              "id": "preserve-iteration",
              "name": "iteration",
              "value": "={{ $json.iteration }}",
              "type": "number"
            },
            {
              "id": "update-phase",
              "name": "phase",
              "value": "={{ $json.output.includes('complete') || $json.output.includes('dropped') ? 'complete' : $json.phase || 'active' }}",
              "type": "string"
            },
            {
              "id": "agent-response",
              "name": "response",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "preserve-state",
      "name": "Preserve Loop State",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [1800, 300]
    },
    {
      "parameters": {
        "content": "=## ✅ Roast Complete!\n\nTotal iterations: {{ $json.iteration }}\nTime: {{ Math.floor(($json.iteration * 10) / 60) }}:{{ String(($json.iteration * 10) % 60).padStart(2, '0') }}\n\nFinal status:\n{{ $json.response }}",
        "height": 300,
        "width": 500
      },
      "id": "complete-note",
      "name": "Roast Complete",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [1120, 520]
    }
  ],
  "connections": {
    "Start Roast": {
      "main": [[{"node": "Get Auth0 Token", "type": "main", "index": 0}]]
    },
    "Get Auth0 Token": {
      "main": [[{"node": "Initialize State", "type": "main", "index": 0}]]
    },
    "Initialize State": {
      "main": [[{"node": "Continue Loop?", "type": "main", "index": 0}]]
    },
    "Continue Loop?": {
      "main": [
        [{"node": "Wait 10s", "type": "main", "index": 0}],
        [{"node": "Roast Complete", "type": "main", "index": 0}]
      ]
    },
    "Wait 10s": {
      "main": [[{"node": "Update State", "type": "main", "index": 0}]]
    },
    "Update State": {
      "main": [[{"node": "AI Roast Agent", "type": "main", "index": 0}]]
    },
    "AI Roast Agent": {
      "main": [[{"node": "Preserve Loop State", "type": "main", "index": 0}]]
    },
    "Preserve Loop State": {
      "main": [[{"node": "Continue Loop?", "type": "main", "index": 0}]]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [[{"node": "AI Roast Agent", "type": "ai_languageModel", "index": 0}]]
    },
    "Roaster Control MCP": {
      "ai_tool": [[{"node": "AI Roast Agent", "type": "ai_tool", "index": 0}]]
    },
    "First Crack Detection MCP": {
      "ai_tool": [[{"node": "AI Roast Agent", "type": "ai_tool", "index": 0}]]
    },
    "Agent Memory": {
      "ai_memory": [[{"node": "AI Roast Agent", "type": "ai_language", "index": 0}]]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "autonomous-v2",
  "meta": {
    "templateCredsSetupCompleted": false
  },
  "tags": []
}
