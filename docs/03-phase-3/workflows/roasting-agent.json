{
  "name": "Coffee Roasting AI Agent",
  "nodes": [
    {
      "parameters": {},
      "id": "trigger-node-001",
      "name": "When chat message received",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://genai-7175210165555426.uk.auth0.com/oauth/token",
        "authentication": "none",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "client_id",
              "value": "Jk3aF2NfkiiOIXY0eHJQxfA6jkP0Pjf7"
            },
            {
              "name": "client_secret",
              "value": "05agLnSUZceYK2Yl9bYGGnV_zuy7EAJ9ZWnMuOpCHEIOx2v8xZ7XNAmsQW020m2k"
            },
            {
              "name": "audience",
              "value": "https://coffee-roasting-api"
            },
            {
              "name": "grant_type",
              "value": "client_credentials"
            }
          ]
        },
        "options": {}
      },
      "id": "auth-node-001",
      "name": "Get Auth0 Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 400]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "token-var",
              "name": "auth_token",
              "value": "={{ $json.access_token }}",
              "type": "string"
            }
          ]
        }
      },
      "id": "store-token-001",
      "name": "Store Token",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [680, 400]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Get the current roaster status and tell me if the system is ready to start roasting.",
        "options": {
          "systemMessage": "You are an expert coffee roasting assistant for a Hottop KN-8828B-2K+ drum roaster.\n\nYou have access to two MCP servers:\n1. Roaster Control MCP - control the roaster hardware (start/stop, heat, fan, drop beans, cooling)\n2. First Crack Detection MCP - monitor for first crack audio detection\n\nYour capabilities:\n- Check roaster status (temperature sensors, roaster state)\n- Start and stop the roaster drum\n- Adjust heat level (0-100% in 10% increments)\n- Adjust fan speed (0-100% in 10% increments)\n- Start/stop first crack audio detection\n- Check first crack detection status\n- Drop beans and start cooling\n\nKey roasting knowledge:\n- Preheat phase: Heat 100%, Fan 0%, target ~180°C chamber temp\n- Charge: User adds beans manually (temp will drop ~100°C)\n- Drying phase: Gradual heat reduction, monitor rate of rise (RoR)\n- Maillard phase: Maintain RoR 5-8°C/min\n- First Crack: Usually occurs at 160-180°C bean temp, 6-10 minutes in\n- Development: After FC, reduce heat to 60-70%, increase fan to 40-50%\n- Development time should be 15-20% of total roast time\n- Drop beans at: Light roast 195-200°C, Medium 205-210°C\n\nSafety limits:\n- Max bean temp: 205°C\n- Max rate of rise: 10°C/min\n- Min rate of rise: 3°C/min (to avoid stall)\n\nAlways check status before making adjustments. Be helpful and explain your reasoning."
        }
      },
      "id": "agent-node-001",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [900, 400]
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {
          "temperature": 0.3,
          "maxTokens": 2000
        }
      },
      "id": "openai-model-001",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [900, 220],
      "credentials": {
        "openAiApi": {
          "id": "openai-credential-placeholder",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "sseEndpoint": "http://host.docker.internal:5002",
        "authentication": "bearer",
        "bearerToken": "={{ $('Store Token').item.json.auth_token }}",
        "toolsToInclude": "all"
      },
      "id": "mcp-roaster-001",
      "name": "Roaster Control MCP",
      "type": "@n8n/n8n-nodes-langchain.toolMcp",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "sseEndpoint": "http://host.docker.internal:5001",
        "authentication": "bearer",
        "bearerToken": "={{ $('Store Token').item.json.auth_token }}",
        "toolsToInclude": "all"
      },
      "id": "mcp-firstcrack-001",
      "name": "First Crack Detection MCP",
      "type": "@n8n/n8n-nodes-langchain.toolMcp",
      "typeVersion": 1,
      "position": [1120, 500]
    }
  ],
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Get Auth0 Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Auth0 Token": {
      "main": [
        [
          {
            "node": "Store Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Token": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "ai_languageModel": [
        [
          {
            "node": "OpenAI Chat Model",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ],
      "ai_tool": [
        [
          {
            "node": "Roaster Control MCP",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "First Crack Detection MCP",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-26T19:47:00.000Z",
  "versionId": "1"
}
